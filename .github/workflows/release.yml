name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: PinGuard ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          ## What's Changed
          
          See [CHANGELOG.md](https://github.com/reicalasso/pinGuard/blob/main/CHANGELOG.md) for details.
          
          ## Installation
          
          ### Quick Install
          ```bash
          curl -sSL https://raw.githubusercontent.com/reicalasso/pinGuard/main/scripts/install.sh | sudo bash
          ```
          
          ### Manual Install
          1. Download the appropriate binary for your system
          2. Extract: `tar -xzf pinGuard-linux-*.tar.gz`
          3. Install: `sudo mv pinGuard /usr/local/bin/`
          4. Make executable: `sudo chmod +x /usr/local/bin/pinGuard`
          
          ## Checksums
          
          | File | SHA256 |
          |------|--------|
          | pinGuard-linux-x86_64.tar.gz | See assets below |
          | pinGuard-linux-arm64.tar.gz | See assets below |

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: pinGuard-linux-x86_64.tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: pinGuard-linux-arm64.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: pinGuard-linux-x86_64-musl.tar.gz
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: pinGuard-linux-arm64-musl.tar.gz
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Install musl tools
      if: contains(matrix.target, 'musl')
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          pinGuard/target/
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Configure cross-compilation
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
          echo "CC_aarch64_unknown_linux_musl=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        fi
    
    - name: Build release binary
      run: |
        cd pinGuard
        cargo build --release --target ${{ matrix.target }}
    
    - name: Create release archive
      run: |
        cd pinGuard/target/${{ matrix.target }}/release
        tar -czf ${{ matrix.name }} pinGuard
        mv ${{ matrix.name }} ../../../../
    
    - name: Generate checksums
      run: |
        sha256sum ${{ matrix.name }} > ${{ matrix.name }}.sha256
        md5sum ${{ matrix.name }} > ${{ matrix.name }}.md5
    
    - name: Upload release binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.name }}
        asset_name: ${{ matrix.name }}
        asset_content_type: application/gzip
    
    - name: Upload SHA256 checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.name }}.sha256
        asset_name: ${{ matrix.name }}.sha256
        asset_content_type: text/plain
    
    - name: Upload MD5 checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.name }}.md5
        asset_name: ${{ matrix.name }}.md5
        asset_content_type: text/plain

  build-docker:
    name: Build and Push Docker Images
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-install-script:
    name: Update Installation Script
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update version in install script
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        sed -i "s/LATEST_RELEASE=.*/LATEST_RELEASE=\"$VERSION\"/" scripts/install.sh
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add scripts/install.sh
        git commit -m "Update install script for ${{ needs.create-release.outputs.version }}" || exit 0
        git push